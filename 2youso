#興味推定のプログラム（入力：瞳孔径の変化，注視時間）
#2要素（2入力），入力層（ニューロン２つとバイアス1つ），中間層（ニューロン2つ，バイアス1つ），出力層（ニューロン1つ）
#バックプロパゲーション
#入力データは前処理で0~1の範囲で正規化したものを入力する必要あり

# coding: UTF-8
import math
import matplotlib.pyplot as plt

# シグモイド関数
def sigmoid(a):
    return 1.0 / (1.0 + math.exp(-a))


# ニューロン
class Neuron:
    input_sum = 0.0
    output = 0.0

    def setInput(self, inp):
        self.input_sum += inp

    def getOutput(self):
        self.output = sigmoid(self.input_sum)  # ニューロンの中に関数を入れる
        return self.output

    def reset(self):
        self.input_sum = 0  # selfはインスタンスを持ってくるときに書く
        self.output = 0

import random
# ニューラルネットワーク
class NeuralNetwork:
    # 重み


    w_im = [[random.uniform(-0.99, 0.99), random.uniform(-0.99, 0.99)],
            [random.uniform(-0.99, 0.99), random.uniform(-0.99, 0.99)],
            [random.uniform(-0.99, 0.99),random.uniform(-0.99, 0.99)]]
    w_mo = [random.uniform(-0.99, 0.99), random.uniform(-0.99, 0.99), random.uniform(-0.99, 0.99)]

    print(w_im)
    print(w_mo)

    # 各層の宣言
    input_layer = [0.0, 0.0, 1.0]  # バイアスの値はどう決めるのか？
    middle_layer = [Neuron(), Neuron(), 1.0]
    output_layer = Neuron()  # プロパティ

    # 実行
    def commit(self, input_data):
        # 各層のリセット
        self.input_layer[0] = input_data[0]  # input_data[0]ってどこ？入力データとは外部から持ってきた直接のデータ？
        self.input_layer[1] = input_data[1]

        self.middle_layer[0].reset()
        self.middle_layer[1].reset()  # 最初に初期化するらしい

        self.output_layer.reset()

        # 入力層→中間層
        self.middle_layer[0].setInput(self.input_layer[0] * self.w_im[0][0])
        self.middle_layer[0].setInput(self.input_layer[1] * self.w_im[1][0])
        self.middle_layer[0].setInput(self.input_layer[2] * self.w_im[2][0])

        self.middle_layer[1].setInput(self.input_layer[0] * self.w_im[0][1])
        self.middle_layer[1].setInput(self.input_layer[1] * self.w_im[1][1])
        self.middle_layer[1].setInput(self.input_layer[2] * self.w_im[2][1])

        # 中間層→出力層
        self.output_layer.setInput(self.middle_layer[0].getOutput() * self.w_mo[0])
        self.output_layer.setInput(self.middle_layer[1].getOutput() * self.w_mo[1])
        self.output_layer.setInput(self.middle_layer[2] * self.w_mo[2])

        return self.output_layer.getOutput()

    def learn(self, input_data):
        # 出力値
        output_data = self.commit([input_data[0], input_data[1]])
        # 正解値
        correct_value = input_data[2]
        # 学習係数  自分で決めるハイパーパラメータ
        k = 0.001#0.6で意図した形，それより大きくすると変化なし．小さくすると狭くなる

        # 出力層→中間層
        delta_w_mo = (correct_value - output_data) * output_data * (1.0 - output_data)
        old_w_mo = list(self.w_mo)
        self.w_mo[0] += self.middle_layer[0].output * delta_w_mo * k
        self.w_mo[1] += self.middle_layer[1].output * delta_w_mo * k
        self.w_mo[2] += self.middle_layer[2] * delta_w_mo * k

        # 中間層→入力層
        delta_w_im = [
            delta_w_mo * old_w_mo[0] * self.middle_layer[0].output * (1.0 - self.middle_layer[0].output),#中間層上のニューロン
            delta_w_mo * old_w_mo[1] * self.middle_layer[1].output * (1.0 - self.middle_layer[1].output),#中間層下のニューロン
        ]
        self.w_im[0][0] += self.input_layer[0] * delta_w_im[0] * k
        self.w_im[0][1] += self.input_layer[0] * delta_w_im[1] * k
        self.w_im[1][0] += self.input_layer[1] * delta_w_im[0] * k
        self.w_im[1][1] += self.input_layer[1] * delta_w_im[1] * k
        self.w_im[2][0] += self.input_layer[2] * delta_w_im[0] * k#バイアス
        self.w_im[2][1] += self.input_layer[2] * delta_w_im[1] * k#バイアス



# ファイルの読み込み2


training_data = []
training_data_file = open("正規化new", "r")
for line in training_data_file:
    line = line.rstrip().split(",")

    training_data.append([(float(line[0])), float(line[1]), int(line[2])])
    
training_data_file.close()

# ニューラルネットワークのインスタンス
neural_network = NeuralNetwork()

# 学習
for t in range(0, 2121):
    for data in training_data:
        neural_network.learn(data)
print(neural_network.w_im)  # 入力層と中間層の重みとバイアス
print(neural_network.w_mo)  # 中間層と出力層の重みとバイアス

# 実行
data_to_commit = [
[0.616,0.051,1],
[0.505,0.002,0]  #配列で入力する
  ]
for data in data_to_commit:#新しく判断されるデータ


    data[1] = float(data[1])

position_ari_learned = [[], []]
position_nasi_learned = [[], []]
count=0#精度のため追加
accuracy=0#精度のため追加
for data in data_to_commit:  # 新しく判断されるデータ　　　

    if neural_network.commit(data) > 0.5:
        position_ari_learned[0].append(data[1])
        position_ari_learned[1].append(data[0])
        print(neural_network.commit(data),"興味あり判定")
        # print(position_ari_learned[0],position_nasi_learned[1])
        if data[2]==1:#精度のため追加
            count=count+1#精度のため追加

    else:
        position_nasi_learned[0].append(data[1])
        position_nasi_learned[1].append(data[0])
        print(neural_network.commit(data),"興味なし判定")
        if data[2] == 0:#精度のため追加
            count = count + 1#精度のため追加
# 訓練用データの表示の準備
position_ari_learning = [[], []]
position_nasi_learning = [[], []]
for data in training_data:
    if data[2] > 0.5:
        position_ari_learning[0].append(data[1])
        position_ari_learning[1].append(data[0])
    else:
        position_nasi_learning[0].append(data[1])
        position_nasi_learning[1].append(data[0])


accuracy=count/648#精度のため追加 データの個数で割る
print(count)
print(accuracy)

# プロット
plt.scatter(position_ari_learning[0], position_ari_learning[1], c="red", label="ari_learn", marker="+")
plt.scatter(position_nasi_learning[0], position_nasi_learning[1], c="blue", label="nasi_learn", marker="+")
plt.scatter(position_ari_learned[0], position_ari_learned[1], c="red", label="ari", marker="o")
plt.scatter(position_nasi_learned[0], position_nasi_learned[1], c="blue", label="nasi", marker="o")

plt.xlabel('time')
plt.ylabel('change')
plt.legend()
plt.show()
